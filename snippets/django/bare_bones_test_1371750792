Bare bones testing
==================

Calling from command line
-------------------------

    $ python manage.py test myapp

Test file
---------

import datetime
from django.utils import timezone
from django.test import TestCase
from polls.models import Poll
from django.core.urlresolvers import reverse

###################################
# Global test helper methods
###################################
def url(route, args=()):
    return reverse("polls:%s" % route, args=args)

def create_poll(question, days):
    return Poll.objects.create(question=question,
            pub_date=timezone.now() + datetime.timedelta(days=days))


class PollMethodTests(TestCase):

    def test_was_published_recently_future_poll(self):
        """
        was_published_recently() should return False for polls whose pub_date
        is in the future
        """
        future_poll = Poll(pub_date=timezone.now() +
datetime.timedelta(days=30))
        self.assertFalse(future_poll.was_published_recently())

    def test_was_published_recently_old_poll(self):
        old_poll = Poll(pub_date=timezone.now() - datetime.timedelta(days=2))
        self.assertFalse(old_poll.was_published_recently())

    def test_was_published_recently_recent_poll(self):
        recent_poll = Poll(pub_date=timezone.now() - datetime.ti

class PollViewTests(TestCase):

    def test_index_view_with_no_polls(self):
        r = self.client.get(url('index'))
        self.assertEqual(r.status_code, 200)
        self.assertContains(r, "No polls are available")
        self.assertQuerysetEqual(r.context['latest_poll_list'], [])

    def test_index_view_with_past_poll(self):
        """
        Polls with a pub_date in the past should be displayed
        """
        create_poll("Past poll", -30)
        r = self.client.get(url("index"))
        self.assertQuerysetEqual(r.context['latest_poll_list'],
            ['<Poll: Past poll>']
        )

    def test_index_view_with_future_poll(self):
        create_poll("Past poll", 30)
        r = self.client.get(url("index"))
        self.assertContains(r, "No polls are available")
        self.assertQuerysetEqual(r.context['latest_poll_list'], [])

    def test_index_view_with_past_and_future_poll(self):
        """
        Polls with a pub_date in the past should be displayed
        """
        create_poll("Past poll", -30)
        create_poll("Future poll", 30)
        r = self.client.get(url("index"))
        self.assertQuerysetEqual(r.context['latest_poll_list'],
            ['<Poll: Past poll>']
        )

    def test_index_view_with_multiple_past_polls(self):
        """
        Polls with a pub_date in the past should be displayed
        """
        create_poll("Past poll", -30)
        create_poll("Past poll2", -31)
        r = self.client.get(url("index"))
        self.assertQuerysetEqual(r.context['latest_poll_list'],
            ['<Poll: Past poll>', '<Poll: Past poll2>']
        )

class PollIndexDetailTests(TestCase):
    def test_detail_view_with_future_poll(self):
        future_poll = create_poll(question='Future poll.', days=5)
        response = self.client.get(reverse('polls:detail',
        args=(future_poll.id,)))
        self.assertEqual(response.status_code, 404)

    def test_detail_view_with_past_poll(self):
        past_poll = create_poll('Past poll.', -5)
        r = self.client.get(url('detail', (past_poll.id,)))
        self.assertEqual(r.status_code, 200)
        self.assertContains(r, past_poll.question)
